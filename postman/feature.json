{
	"info": {
		"_postman_id": "ec4199b1-f28d-4b92-b839-a25569e26a2d",
		"name": "comment test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28176282"
	},
	"item": [
		{
			"name": "Private Api",
			"item": [
				{
					"name": "Validation",
					"item": [
						{
							"name": "Добавление комментария к неопубликованному событию",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const author = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        //event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set('uid', author.id);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение чужого комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    let comment\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const author = await api.addUser(rnd.getUser());\r",
											"        const some_user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        comment = await api.addComment(author.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"uid\", some_user.id);\r",
											"        pm.collectionVariables.set(\"comid\", comment.id);\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            text : rnd.getComment().text\r",
											"        }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"    \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "commentId",
											"value": "{{comid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария с text > 1000",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const author = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set('uid', author.id);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
											"        comment = {text: rnd.getWord(1001)};\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария с text < 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const author = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set('uid', author.id);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
											"        comment = {text: rnd.getWord(1)};\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Добавление комментария к событию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set('uid', author.id);\r",
									"        pm.request.removeQueryParams(['eventId']);\r",
									"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
									"        comment = rnd.getComment();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"var query = {};\r",
									"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, author, event, createdOn\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(pm.collectionVariables.get('uid')).equal(target.author.id, 'ID автора комментария должно совпадать с отправленным');\r",
									"     pm.expect(target.event.id.toString()).equal(query['eventId'].toString(), 'ID события должно совпадать с отправленным');\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должен совпадать с текстом комментария в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение комментария автором",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let comment\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        comment = await api.addComment(author.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"uid\", author.id);\r",
									"        pm.collectionVariables.set(\"comid\", comment.id);\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            text : rnd.getComment().text\r",
									"        }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"    \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, author, event, createdOn, changed\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('changed');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должен совпадать с текстом комментария в запросе');\r",
									"   \r",
									"    pm.expect(target.changed.toString()).equal('true', 'Флаг изменения комментария должен быть TRUE');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "{{comid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев автора вне зависимости от события",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    \r",
									"    try {\r",
									"        const initiator1 = await api.addUser(rnd.getUser());\r",
									"        const initiator2 = await api.addUser(rnd.getUser());\r",
									"        const category1 = await api.addCategory(rnd.getCategory());\r",
									"        const category2 = await api.addCategory(rnd.getCategory());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        \r",
									"        let event1 = await api.addEvent(initiator1.id, rnd.getEvent(category1.id));\r",
									"        event1 = await api.publishEvent(event1.id);\r",
									"\r",
									"        let event2 = await api.addEvent(initiator2.id, rnd.getEvent(category2.id));\r",
									"        event2 = await api.publishEvent(event2.id);\r",
									"\r",
									"        const comment1 = await api.addComment(author.id, event1.id, rnd.getComment());\r",
									"        const comment2 = await api.addComment(author.id, event2.id, rnd.getComment());\r",
									"\r",
									"        pm.collectionVariables.set(\"uid\", author.id);\r",
									"        pm.collectionVariables.set(\"response\", comment1)\r",
									"        pm.collectionVariables.set(\"response\", comment2)\r",
									"    \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарии должны содержать поля: id, text, author, event, createdOn\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('createdOn');\r",
									"\r",
									"pm.expect(target[1]).to.have.property('id');\r",
									"pm.expect(target[1]).to.have.property('text');\r",
									"pm.expect(target[1]).to.have.property('author');\r",
									"pm.expect(target[1]).to.have.property('event');\r",
									"pm.expect(target[1]).to.have.property('createdOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Должно быть найдено два комментария одного пользователя вне зависимости от события\", function () {\r",
									"    pm.expect(target.length).to.eql(2); \r",
									"});\r",
									"pm.test(\"ID автора комментария должно совпадать с отправленным\", function () {\r",
									"    pm.expect(pm.collectionVariables.get('uid')).equal(target[0].author.id);\r",
									"    pm.expect(pm.collectionVariables.get('uid')).equal(target[1].author.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев автора в конкретном событии",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    \r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        \r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"\r",
									"        const comment1 = await api.addComment(author.id, event.id, rnd.getComment());\r",
									"        const comment2 = await api.addComment(author.id, event.id, rnd.getComment());\r",
									"\r",
									"        pm.request.removeQueryParams(['eventId']);\r",
									"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
									"        pm.collectionVariables.set(\"uid\", author.id);\r",
									"        pm.collectionVariables.set(\"response\", comment1)\r",
									"        pm.collectionVariables.set(\"response\", comment2)\r",
									"    \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"var query = {};\r",
									"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
									"\r",
									"pm.test(\"Комментарии должны содержать поля: id, text, author, event, createdOn\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('createdOn');\r",
									"\r",
									"pm.expect(target[1]).to.have.property('id');\r",
									"pm.expect(target[1]).to.have.property('text');\r",
									"pm.expect(target[1]).to.have.property('author');\r",
									"pm.expect(target[1]).to.have.property('event');\r",
									"pm.expect(target[1]).to.have.property('createdOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Должно быть найдено два комментария одного пользователя в конкретном событии\", function () {\r",
									"    pm.expect(target.length).to.eql(2); \r",
									"});\r",
									"pm.test(\"ID автора комментария должно совпадать с отправленным\", function () {\r",
									"    pm.expect(pm.collectionVariables.get('uid')).equal(target[0].author.id);\r",
									"    pm.expect(pm.collectionVariables.get('uid')).equal(target[1].author.id);\r",
									"});\r",
									"pm.test(\"ID события должно совпадать с отправленным\", function () {\r",
									"    pm.expect(target[0].event.id.toString()).equal(query['eventId'].toString());\r",
									"     pm.expect(target[1].event.id.toString()).equal(query['eventId'].toString());\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария автором",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"uid\", author.id);\r",
									"        const comment = await api.addComment(author.id, event.id, rnd.getComment());\r",
									"        const findedComment = await api.findComment(comment.id);\r",
									"        \r",
									"        pm.collectionVariables.set(\"comid\", comment.id);\r",
									"        pm.collectionVariables.set(\"response\", findedComment);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"source = pm.collectionVariables.get('response');\r",
									"comid = parseInt(pm.collectionVariables.get('comid'));\r",
									"\r",
									"pm.test(\"Комментарий должен быть найден до удаления\", function () {\r",
									"    pm.expect(source.id).equal(comid, 'Идентификтор комментария должен совпадать с удаляемым');\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/comments/\"  + comid,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Комментарий не должен быть найден после удаления\", function () {\r",
									"                pm.expect(response.code).to.eql(404);\r",
									"            });\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "{{comid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Public Api",
			"item": [
				{
					"name": "Просмотр всех комментариев к событию любым пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    \r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const author1 = await api.addUser(rnd.getUser());\r",
									"        const author2 = await api.addUser(rnd.getUser());\r",
									"        const author3 = await api.addUser(rnd.getUser());\r",
									"        const author4 = await api.addUser(rnd.getUser());\r",
									"        const author5 = await api.addUser(rnd.getUser());\r",
									"    \r",
									"        \r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"\r",
									"        const comment1 = await api.addComment(author1.id, event.id, rnd.getComment());\r",
									"        const comment2 = await api.addComment(author2.id, event.id, rnd.getComment());\r",
									"        const comment3 = await api.addComment(author3.id, event.id, rnd.getComment());\r",
									"        const comment4 = await api.addComment(author4.id, event.id, rnd.getComment());\r",
									"        const comment5 = await api.addComment(author5.id, event.id, rnd.getComment());\r",
									"        \r",
									"\r",
									"        pm.request.removeQueryParams(['eventId']);\r",
									"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
									"        //pm.collectionVariables.set(\"uid\", author.id);\r",
									"        pm.collectionVariables.set(\"response\", comment1);\r",
									"        pm.collectionVariables.set(\"response\", comment2);\r",
									"        pm.collectionVariables.set(\"response\", comment3);\r",
									"        pm.collectionVariables.set(\"response\", comment4);\r",
									"        pm.collectionVariables.set(\"response\", comment5);\r",
									"    \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"var query = {};\r",
									"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
									"\r",
									"pm.test(\"Комментарии должны содержать поля: id, text, author, event, createdOn\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('createdOn');\r",
									"\r",
									"pm.expect(target[1]).to.have.property('id');\r",
									"pm.expect(target[1]).to.have.property('text');\r",
									"pm.expect(target[1]).to.have.property('author');\r",
									"pm.expect(target[1]).to.have.property('event');\r",
									"pm.expect(target[1]).to.have.property('createdOn');\r",
									"\r",
									"pm.expect(target[2]).to.have.property('id');\r",
									"pm.expect(target[2]).to.have.property('text');\r",
									"pm.expect(target[2]).to.have.property('author');\r",
									"pm.expect(target[2]).to.have.property('event');\r",
									"pm.expect(target[2]).to.have.property('createdOn');\r",
									"\r",
									"pm.expect(target[3]).to.have.property('id');\r",
									"pm.expect(target[3]).to.have.property('text');\r",
									"pm.expect(target[3]).to.have.property('author');\r",
									"pm.expect(target[3]).to.have.property('event');\r",
									"pm.expect(target[3]).to.have.property('createdOn');\r",
									"\r",
									"pm.expect(target[4]).to.have.property('id');\r",
									"pm.expect(target[4]).to.have.property('text');\r",
									"pm.expect(target[4]).to.have.property('author');\r",
									"pm.expect(target[4]).to.have.property('event');\r",
									"pm.expect(target[4]).to.have.property('createdOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Должно быть найдено пять разных комментариев в конкретном событии\", function () {\r",
									"    pm.expect(target.length).to.eql(5); \r",
									"});\r",
									"\r",
									"pm.test(\"ID события должно совпадать с отправленным\", function () {\r",
									"    pm.expect(target[0].event.id.toString()).equal(query['eventId'].toString());\r",
									"    pm.expect(target[1].event.id.toString()).equal(query['eventId'].toString());\r",
									"    pm.expect(target[2].event.id.toString()).equal(query['eventId'].toString());\r",
									"    pm.expect(target[3].event.id.toString()).equal(query['eventId'].toString());\r",
									"    pm.expect(target[4].event.id.toString()).equal(query['eventId'].toString());\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments?eventId=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Api",
			"item": [
				{
					"name": "Получение комментария по идентификатору",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let comment\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        comment = await api.addComment(author.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"comid\", comment.id);\r",
									"        pm.collectionVariables.set(\"response\", comment);\r",
									"    \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарии должны содержать поля: id, text, author, event, createdOn\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(source.id).equal(target.id, 'ID комментария должен соответствовать ID комментария в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{comid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария администратором",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        //pm.collectionVariables.set(\"uid\", author.id);\r",
									"        const comment = await api.addComment(author.id, event.id, rnd.getComment());\r",
									"        const findedComment = await api.findComment(comment.id);\r",
									"        \r",
									"        pm.collectionVariables.set(\"comid\", comment.id);\r",
									"        pm.collectionVariables.set(\"response\", findedComment);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"source = pm.collectionVariables.get('response');\r",
									"comid = parseInt(pm.collectionVariables.get('comid'));\r",
									"\r",
									"pm.test(\"Комментарий должен быть найден до удаления\", function () {\r",
									"    pm.expect(source.id).equal(comid, 'Идентификтор комментария должен совпадать с удаляемым');\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/comments/\"  + comid,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Комментарий не должен быть найден после удаления\", function () {\r",
									"                pm.expect(response.code).to.eql(404);\r",
									"            });\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{comid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение комментария администратором",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let comment\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const author = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        comment = await api.addComment(author.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"uid\", author.id);\r",
									"        pm.collectionVariables.set(\"comid\", comment.id);\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            text : rnd.getComment().text\r",
									"        }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"    \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, author, event, createdOn, changed\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('changed');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должен совпадать с текстом комментария в запросе');\r",
									"   \r",
									"    pm.expect(target.changed.toString()).equal('true', 'Флаг изменения комментария должен быть TRUE');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{comid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"     async addComment(userId, eventId, comment, verbose=null) {",
					"        return this.post('/users/' + userId + '/comments?eventId=' + eventId, comment, \"Ошибка при добавлении комментария: \", verbose);",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findComment(commentId, verbose=null) {",
					"        return this.get('/admin/comments/' + commentId, null, \"Ошибка при поиске комментария по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraph}}')",
					"        }",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "uid",
			"value": "1"
		},
		{
			"key": "request_body",
			"value": "",
			"type": "string"
		},
		{
			"key": "eid",
			"value": "1"
		},
		{
			"key": "comid",
			"value": "1"
		},
		{
			"key": "catid",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		}
	]
}